"""
Django settings for vendora project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from datetime import timedelta
from urllib.parse import urlparse, parse_qs
import logging
import json
import dj_database_url

SENTRY_DSN_RAW = config('SENTRY_DSN', default='')
SENTRY_DSN = str(SENTRY_DSN_RAW) if SENTRY_DSN_RAW not in (True, False) else None
SENTRY_TRACES_SAMPLE_RATE = float(config('SENTRY_TRACES_SAMPLE_RATE', default='0.0'))
SENTRY_PROFILES_SAMPLE_RATE = float(config('SENTRY_PROFILES_SAMPLE_RATE', default='0.0'))

# Trial configuration
TRIAL_DAYS = int(config('TRIAL_DAYS', default=14))



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
FRONTEND_DIST = (BASE_DIR.parent / 'frontend' / 'dist').resolve()
# Application version (single source of truth)
try:
    with open(BASE_DIR.parent / 'VERSION', 'r', encoding='utf-8') as vf:
        APP_VERSION = vf.read().strip()
except Exception:
    APP_VERSION = '0.0.0'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY: secrets and environment-driven config
SECRET_KEY = config('SECRET_KEY', default='CHANGE_ME_DEV_ONLY')
DEBUG = config('DEBUG', cast=bool, default=True)

ALLOWED_HOSTS = [h.strip() for h in str(config('ALLOWED_HOSTS', default='127.0.0.1,localhost,app.vendora.page,vendora.page')).split(',') if h.strip()]
# Add testserver for Django tests
if 'testserver' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('testserver')
CSRF_TRUSTED_ORIGINS = [o.strip() for o in str(config('CSRF_TRUSTED_ORIGINS', default='http://127.0.0.1:8000')).split(',') if o.strip()]

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = str(config('TELEGRAM_BOT_TOKEN', default='')).strip()
TELEGRAM_BOT_USERNAME = str(config('TELEGRAM_BOT_USERNAME', default='VendoraBot')).strip()
TELEGRAM_CHAT_ID = str(config('TELEGRAM_CHAT_ID', default='')).strip()
TELEGRAM_WEBHOOK_URL = str(config('TELEGRAM_WEBHOOK_URL', default='')).strip()
TELEGRAM_WEBHOOK_SECRET = str(config('TELEGRAM_WEBHOOK_SECRET', default='')).strip()

# Orders configuration
# Global fallback for auto-expiry (minutes) used when a Vendor has not set a preference
ORDER_AUTO_EXPIRE_MINUTES = int(config('ORDER_AUTO_EXPIRE_MINUTES', default=30))

# Web Push (VAPID) configuration
VAPID_PUBLIC_KEY = str(config('VAPID_PUBLIC_KEY', default='')).strip()
VAPID_PRIVATE_KEY = str(config('VAPID_PRIVATE_KEY', default='')).strip()
VAPID_EMAIL = str(config('VAPID_EMAIL', default='admin@example.com')).strip()

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'corsheaders',
    'channels',
    'api',
    'accounts',
    'notifications',
    'orders',
    'queries',
    'rates',
    'transactions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Simple request id injection (fallback). Real impl could use a lib.
    'vendora.settings.RequestIDMiddleware',
    'vendora.settings.SecurityHeadersMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # Account status gating AFTER auth so request.user is populated
    'vendora.settings.AccountStatusMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vendora.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [str(FRONTEND_DIST)],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vendora.wsgi.application'

# Channels / ASGI settings (use in-memory layer for single-host deployments)
ASGI_APPLICATION = 'vendora.asgi.application'
# If REDIS_URL is provided, use RedisChannelLayer for production scaling
REDIS_URL = config('REDIS_URL', default='')
if REDIS_URL:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [REDIS_URL],
            },
        }
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        }
    }


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database: prefer DATABASE_URL (e.g., Postgres) else fallback to SQLite for dev
DATABASE_URL = str(config('DATABASE_URL', default=''))
if DATABASE_URL:
    # Basic parsing; rely on dj-database-url if present, else manual
    # Example: postgres://user:pass@host:5432/dbname
    url = urlparse(str(DATABASE_URL))
    ENGINE_MAP = {
        'postgres': 'django.db.backends.postgresql',
        'postgresql': 'django.db.backends.postgresql',
        'postgresql_psycopg2': 'django.db.backends.postgresql',
        'mysql': 'django.db.backends.mysql',
    }
    # Parse query string options (e.g., sslmode=require)
    query_params = {k: v[0] for k, v in parse_qs(url.query).items()}
    # Default to SSL for remote Postgres if not explicitly set
    host = (url.hostname or '').lower()
    if not query_params.get('sslmode') and host not in ('localhost', '127.0.0.1'):
        query_params['sslmode'] = 'require'

    DATABASES = {
        'default': {
            'ENGINE': ENGINE_MAP.get(url.scheme, 'django.db.backends.postgresql'),
            'NAME': url.path.lstrip('/'),
            'USER': url.username or '',
            'PASSWORD': url.password or '',
            'HOST': url.hostname or '',
            'PORT': str(url.port or ''),
            # Pass through connection options like sslmode
            'OPTIONS': query_params,
            # Keep connections alive for performance (seconds)
            'CONN_MAX_AGE': int(config('DB_CONN_MAX_AGE', default=60)),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_DIRS = [
    # Serve built frontend assets (JS/CSS) under /static when present
    str(FRONTEND_DIST / 'assets')
]

# Efficient static files in production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (for uploads like avatars)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration: basic JSON-capable console logs
LOG_LEVEL = str(config('LOG_LEVEL', default='INFO')).upper()
LOG_JSON = config('LOG_JSON', cast=bool, default=True)

class JsonFormatter(logging.Formatter):
    def format(self, record):  # type: ignore[override]
        base = {
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'time': self.formatTime(record, self.datefmt),
        }
        if record.exc_info:
            base['exc_info'] = self.formatException(record.exc_info)
        return json.dumps(base)

_console_handler: dict = {
    'class': 'logging.StreamHandler',
    'level': LOG_LEVEL,
    'formatter': 'json' if LOG_JSON else 'plain',
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'plain': {
            'format': '[{levelname}] {name} {message}',
            'style': '{',
        },
        'json': {
            '()': JsonFormatter,
        },
    },
    'handlers': {
        'console': _console_handler,
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django.request': {'level': LOG_LEVEL, 'handlers': ['console'], 'propagate': False},
    'django.db.backends': {'level': str(config('DB_LOG_LEVEL', default='WARNING')).upper()},
    },
}


# Lightweight Request ID middleware for log correlation
import uuid
from django.utils.deprecation import MiddlewareMixin
class RequestIDMiddleware(MiddlewareMixin):  # type: ignore
    def process_request(self, request):  # type: ignore[override]
        rid = request.META.get('HTTP_X_REQUEST_ID') or uuid.uuid4().hex[:12]
        request.request_id = rid  # type: ignore[attr-defined]
        # Attach to logging MDC by adding to record via filter (simple env var)
        os.environ['REQUEST_ID'] = rid
    def process_response(self, request, response):  # type: ignore[override]
        rid = getattr(request, 'request_id', None)
        if rid:
            response['X-Request-ID'] = rid
        return response


# Middleware to append security headers when not DEBUG
class SecurityHeadersMiddleware(MiddlewareMixin):  # type: ignore
    def process_response(self, request, response):  # type: ignore[override]
        if not DEBUG:
            csp = globals().get('CONTENT_SECURITY_POLICY')
            if csp:
                response['Content-Security-Policy'] = csp
            ref = globals().get('REFERRER_POLICY')
            if ref:
                response['Referrer-Policy'] = ref
            perm = globals().get('PERMISSIONS_POLICY')
            if perm:
                response['Permissions-Policy'] = perm
            xfo = globals().get('X_FRAME_OPTIONS')
            if xfo:
                response['X-Frame-Options'] = xfo
            response.setdefault('X-Content-Type-Options', 'nosniff')
        return response

# Account status enforcement middleware
class AccountStatusMiddleware(MiddlewareMixin):  # type: ignore
    ALLOW_PATH_SUFFIXES = {"/api/v1/accounts/token/", "/api/v1/accounts/signup/", "/api/v1/accounts/password-reset/", "/api/v1/accounts/password-reset/confirm/"}

    def _maybe_authenticate_jwt(self, request):
        """If AuthenticationMiddleware hasn't populated an authenticated user yet but an
        Authorization header with Bearer token exists, attempt JWT auth manually.
        This helps in tests or edge ordering cases. Swallow errors silently.
        """
        try:
            user = getattr(request, 'user', None)
            if user and getattr(user, 'is_authenticated', False):
                return
            auth = request.META.get('HTTP_AUTHORIZATION', '')
            if not auth.lower().startswith('bearer '):
                return
            from rest_framework_simplejwt.authentication import JWTAuthentication
            jwt_auth = JWTAuthentication()
            validated = jwt_auth.authenticate(request)
            if validated:
                request.user = validated[0]  # type: ignore[attr-defined]
        except Exception:
            pass

    def process_view(self, request, view_func, view_args, view_kwargs):  # type: ignore[override]
        self._maybe_authenticate_jwt(request)
        user = getattr(request, 'user', None)
        if not user or not getattr(user, 'is_authenticated', False):
            return None
        from django.utils import timezone
        now = timezone.now()
        trial_expired = bool(getattr(user, 'is_trial', False) and getattr(user, 'trial_expires_at', None) and user.trial_expires_at < now)
        plan_expired = bool(getattr(user, 'plan', '') not in ('trial','none') and getattr(user, 'plan_expires_at', None) and user.plan_expires_at < now)
        suspended = not bool(getattr(user, 'is_service_active', True))
        if not (trial_expired or plan_expired or suspended):
            return None
        path = request.path or ''
        if any(path.endswith(suf) for suf in self.ALLOW_PATH_SUFFIXES):
            return None
        from django.http import JsonResponse
        detail = {
            'detail': 'Account not active',
            'trial_expired': trial_expired,
            'plan_expired': plan_expired,
            'suspended': suspended,
            'code': 'ACCOUNT_INACTIVE'
        }
        return JsonResponse(detail, status=403)


# Django REST framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # Throttling refined 
    'DEFAULT_THROTTLE_CLASSES': [
    'rest_framework.throttling.AnonRateThrottle',
    'vendora.throttling.TrialUserRateThrottle',
    'vendora.throttling.RegularUserRateThrottle',
        'vendora.throttling.OrderWriteScopedThrottle',
        'vendora.throttling.RateWriteScopedThrottle',
        'vendora.throttling.AuthBurstScopedThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        # Base global scopes (override via env variables below)
        'anon': config('THROTTLE_ANON', default='60/min'),
        'user': config('THROTTLE_USER', default='240/min'),
        'user_trial': config('THROTTLE_TRIAL_USER', default='120/min'),
        'order_write': config('THROTTLE_ORDER_WRITE', default='30/min'),
        'rate_write': config('THROTTLE_RATES_WRITE', default='15/min'),
        'auth_burst': config('THROTTLE_AUTH_BURST', default='20/min'),
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'EXCEPTION_HANDLER': 'api.exceptions.custom_exception_handler',
}

# CORS settings
# Allow common local dev origins by default; in DEBUG allow all to reduce friction
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', cast=bool, default=False)
_cors = str(config(
    'CORS_ALLOWED_ORIGINS',
    default='http://127.0.0.1:5173,http://localhost:5173,https://127.0.0.1:5173,https://localhost:5173'
))
CORS_ALLOWED_ORIGINS = [o.strip() for o in str(_cors).split(',') if o.strip()]

# Add production origins for Render
if not DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        'https://vendora-frontend.onrender.com',
        'https://your-custom-domain.com'  # Replace with your domain
    ])

# In development, reflect any origin to avoid preflight blocks when using different local hosts/ports
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True


# Use custom user model
AUTH_USER_MODEL = 'accounts.Vendor'

# Authentication backends (default honors USERNAME_FIELD='email')
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vendora.com')

# Optional SMTP settings for production
# Set EMAIL_BACKEND to 'django.core.mail.backends.smtp.EmailBackend' and configure the following:
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=587)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=True)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)
EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', cast=int, default=10)

FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:5173')

# Security headers (applied when DEBUG=False)
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', cast=bool, default=True)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = int(config('SECURE_HSTS_SECONDS', default=31536000))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Additional security headers (Task 13)
    # Basic CSP: adjust if you add external CDNs; 'self' for scripts/styles, allow data: for images & inline svgs
    CONTENT_SECURITY_POLICY = config('CONTENT_SECURITY_POLICY', default="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self'; base-uri 'self'; frame-ancestors 'none'; form-action 'self'")
    REFERRER_POLICY = config('REFERRER_POLICY', default='strict-origin-when-cross-origin')
    PERMISSIONS_POLICY = config('PERMISSIONS_POLICY', default='geolocation=(), microphone=(), camera=()')
    X_FRAME_OPTIONS = config('X_FRAME_OPTIONS', default='DENY')

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Sentry initialization (only if DSN provided)
if SENTRY_DSN:
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration
        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[DjangoIntegration()],
            traces_sample_rate=SENTRY_TRACES_SAMPLE_RATE,
            profiles_sample_rate=SENTRY_PROFILES_SAMPLE_RATE,
            send_default_pii=False,
        )
    except Exception:  # pragma: no cover
        pass

# Production settings for Render
if os.environ.get('RENDER'):
    DEBUG = False
    # Add Render domains to ALLOWED_HOSTS
    render_hosts = ['vendora-backend.onrender.com', 'your-custom-domain.com']
    ALLOWED_HOSTS.extend(render_hosts)
    
    # Use dj-database-url for DATABASE_URL parsing (replaces existing logic)
    if DATABASE_URL:
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL)
        }
